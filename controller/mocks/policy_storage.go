// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	models "github.com/goauthlink/authlink/controller/models"
	mock "github.com/stretchr/testify/mock"
)

// PolicyStorage is an autogenerated mock type for the PolicyStorage type
type PolicyStorage struct {
	mock.Mock
}

type PolicyStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *PolicyStorage) EXPECT() *PolicyStorage_Expecter {
	return &PolicyStorage_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ns, name
func (_m *PolicyStorage) Delete(ns string, name string) {
	_m.Called(ns, name)
}

// PolicyStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PolicyStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ns string
//   - name string
func (_e *PolicyStorage_Expecter) Delete(ns interface{}, name interface{}) *PolicyStorage_Delete_Call {
	return &PolicyStorage_Delete_Call{Call: _e.mock.On("Delete", ns, name)}
}

func (_c *PolicyStorage_Delete_Call) Run(run func(ns string, name string)) *PolicyStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *PolicyStorage_Delete_Call) Return() *PolicyStorage_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *PolicyStorage_Delete_Call) RunAndReturn(run func(string, string)) *PolicyStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ns, needLabels
func (_m *PolicyStorage) List(ns string, needLabels models.LabelSet) []models.Policy {
	ret := _m.Called(ns, needLabels)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []models.Policy
	if rf, ok := ret.Get(0).(func(string, models.LabelSet) []models.Policy); ok {
		r0 = rf(ns, needLabels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Policy)
		}
	}

	return r0
}

// PolicyStorage_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type PolicyStorage_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ns string
//   - needLabels models.LabelSet
func (_e *PolicyStorage_Expecter) List(ns interface{}, needLabels interface{}) *PolicyStorage_List_Call {
	return &PolicyStorage_List_Call{Call: _e.mock.On("List", ns, needLabels)}
}

func (_c *PolicyStorage_List_Call) Run(run func(ns string, needLabels models.LabelSet)) *PolicyStorage_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(models.LabelSet))
	})
	return _c
}

func (_c *PolicyStorage_List_Call) Return(_a0 []models.Policy) *PolicyStorage_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PolicyStorage_List_Call) RunAndReturn(run func(string, models.LabelSet) []models.Policy) *PolicyStorage_List_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: ns, policy
func (_m *PolicyStorage) Put(ns string, policy models.Policy) {
	_m.Called(ns, policy)
}

// PolicyStorage_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type PolicyStorage_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ns string
//   - policy models.Policy
func (_e *PolicyStorage_Expecter) Put(ns interface{}, policy interface{}) *PolicyStorage_Put_Call {
	return &PolicyStorage_Put_Call{Call: _e.mock.On("Put", ns, policy)}
}

func (_c *PolicyStorage_Put_Call) Run(run func(ns string, policy models.Policy)) *PolicyStorage_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(models.Policy))
	})
	return _c
}

func (_c *PolicyStorage_Put_Call) Return() *PolicyStorage_Put_Call {
	_c.Call.Return()
	return _c
}

func (_c *PolicyStorage_Put_Call) RunAndReturn(run func(string, models.Policy)) *PolicyStorage_Put_Call {
	_c.Call.Return(run)
	return _c
}

// NewPolicyStorage creates a new instance of PolicyStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPolicyStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *PolicyStorage {
	mock := &PolicyStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
